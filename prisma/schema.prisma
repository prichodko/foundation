datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filterJson"]
}

model User {
  id               String      @id @default(cuid())
  createdAt        DateTime    @default(now()) @map("created_at")
  updatedAt        DateTime    @updatedAt @map("updated_at")
  email            String      @unique
  emailVerified    DateTime?   @map("email_verified")
  name             String?
  image            String?
  accounts         Account[]
  sessions         Session[]
  company          Company?
  jobs             Job[]
  likes            UserLikes[]
  alerts           Alert[]
  feedback         Feedback[]
  stripeCustomerId String?     @map("stripe_customer_id")

  @@map(name: "users")
}

model Account {
  id                String   @id @default(cuid())
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  userId            String   @map("user_od")
  user              User     @relation(fields: [userId], references: [id])
  type              String   @map("provider_type")
  provider          String   @map("provider")
  providerAccountId String   @map("provider_account_id")

  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  expires      DateTime
  userId       String   @map("user_id")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model UserLikes {
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")
  job    Job    @relation(fields: [jobId], references: [id])
  jobId  String @map("job_id")

  @@id([userId, jobId])
  @@map(name: "user_likes")
}

model Company {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  name        String
  slug        String   @unique
  description String   @default("")
  email       String
  website     String
  logoUrl     String?
  twitter     String?
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique @map("user_id")
  viewCount   Int      @default(0) @map("view_count")

  @@map(name: "companies")
}

enum JobStatus {
  Draft
  Live
  Closed
  Archived
}

enum JobRole {
  AccountingAndFinance
  Administration
  CustomerService
  Design
  IT
  Legal
  MarketingAndCommunications
  Operations
  Engineering
  PeopleAndHR
  Product
  QualityAssurance
  Sales
  BusinessDevelopment
  Other
}

enum JobType {
  FullTime
  PartTime
  Contract
  Internship
}

model Job {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  archivedAt  DateTime?   @map("archived_at")
  type        JobType     @default(FullTime)
  role        JobRole
  position    String
  description Json        @default("{}")
  applyUrl    String      @map("apply_url")
  remote      Boolean
  user        User        @relation(fields: [userId], references: [id])
  userId      String      @map("user_id")
  likedBy     UserLikes[]
  tags        JobTags[]
  viewCount   Int         @default(0) @map("view_count")
  status      JobStatus   @default(Draft)
  salaryMin   Int         @default(0) @map("salary_min")
  salaryMax   Int         @default(0) @map("salary_max")
  paysCrypto  Boolean     @default(false) @map("pays_crypto")

  @@map(name: "jobs")
}

model JobTags {
  job     Job    @relation(fields: [jobId], references: [id])
  jobId   String @map("job_id")
  tag     Tag    @relation(fields: [tagName], references: [name])
  tagName String @map("tag_name")


  @@id([jobId, tagName])
  @@map(name: "job_tags")
}

model Tag {
  name      String    @unique
  createdAt DateTime  @default(now()) @map("created_at")
  jobs      JobTags[]

  @@map(name: "tags")
}

model Alert {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  filter    Json
  read      Boolean  @default(false)

  @@map(name: "alerts")
}

enum FeedbackReaction {
  Happy
  Neutral
  Sad
}

model Feedback {
  id        String           @id @default(cuid())
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")
  email     String?
  userId    String?          @map("user_id")
  user      User?            @relation(fields: [userId], references: [id])
  message   String
  reaction  FeedbackReaction

  @@map(name: "feedback")
}
