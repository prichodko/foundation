/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import type * as prisma from '.prisma/client'
import type { Context } from './../context'
import type { FieldAuthorizeResolver } from 'nexus/dist/plugins/fieldAuthorizePlugin'
import type { core } from 'nexus'
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(
      fieldName: FieldName,
      opts?: core.CommonInputFieldConfig<TypeName, FieldName>
    ): void // "DateTime";
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(
      fieldName: FieldName,
      opts?: core.CommonInputFieldConfig<TypeName, FieldName>
    ): void // "JSONObject";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(
      fieldName: FieldName,
      ...opts: core.ScalarOutSpread<TypeName, FieldName>
    ): void // "DateTime";
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(
      fieldName: FieldName,
      ...opts: core.ScalarOutSpread<TypeName, FieldName>
    ): void // "JSONObject";
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  CreateAlertInput: {
    // input type
    filter: NexusGenScalars['JSONObject'] // JSONObject!
  }
  CreateCheckoutSessionInput: {
    // input type
    name: string // String!
    price: number // Int!
  }
  CreateFeedbackInput: {
    // input type
    email?: string | null // String
    message: string // String!
  }
  CreateJobInput: {
    // input type
    applyUrl: string // String!
    description: string // String!
    position: string // String!
    remote: boolean // Boolean!
    role: NexusGenEnums['JobRole'] // JobRole!
    tags: string[] // [ID!]!
    type: NexusGenEnums['JobType'] // JobType!
  }
  CreateTagInput: {
    // input type
    name: string // String!
  }
  JobsFilter: {
    // input type
    company?: string[] | null // [ID!]
    position?: string | null // String
    remote?: boolean | null // Boolean
    role?: NexusGenEnums['JobRole'] | null // JobRole
    salaryMax?: number | null // Int
    salaryMin?: number | null // Int
    tags?: string[] | null // [ID!]
  }
  UpdateCompanyInput: {
    // input type
    email: string // String!
    id: string // ID!
    name: string // String!
    twitter: string // String!
    website: string // String!
  }
  UpdateJobInput: {
    // input type
    applyUrl: string // String!
    description: NexusGenScalars['JSONObject'] // JSONObject!
    id: string // ID!
    position: string // String!
    remote: boolean // Boolean!
    role: NexusGenEnums['JobRole'] // JobRole!
    tags: string[] // [ID!]!
  }
  UpdateUserInput: {
    // input type
    name: string // String!
  }
}

export interface NexusGenEnums {
  JobRole: prisma.JobRole
  JobStatus: prisma.JobStatus
  JobType: prisma.JobType
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: Date
  JSONObject: JsonObject
}

export interface NexusGenObjects {
  Alert: prisma.Alert
  CheckoutSessionResult: {
    // root type
    amount: number // Int!
    id: string // String!
  }
  City: {
    // root type
    id: string // ID!
    name: string // String!
  }
  Company: prisma.Company
  CompanySearch: {
    // root type
    id: string // ID!
    name: string // String!
  }
  CreateBillingPortalSessionResult: {
    // root type
    url: string // String!
  }
  CreateCheckoutSessionResult: {
    // root type
    sessionUrl: string // String!
  }
  Job: prisma.Job
  Mutation: {}
  Query: {}
  SuccessResult: {
    // root type
    success: boolean // Boolean!
  }
  Tag: prisma.Tag
  TagSearch: {
    // root type
    count: number // Int!
    id: string // ID!
    name: string // String!
  }
  User: prisma.User
}

export interface NexusGenInterfaces {}

export interface NexusGenUnions {}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes &
  NexusGenScalars &
  NexusGenEnums

export interface NexusGenFieldTypes {
  Alert: {
    // field return type
    filter: NexusGenScalars['JSONObject'] // JSONObject!
    id: string // ID!
  }
  CheckoutSessionResult: {
    // field return type
    amount: number // Int!
    id: string // String!
  }
  City: {
    // field return type
    id: string // ID!
    name: string // String!
  }
  Company: {
    // field return type
    createdAt: NexusGenScalars['DateTime'] // DateTime!
    description: string // String!
    email: string // String!
    id: string // ID!
    jobs: NexusGenRootTypes['Job'][] // [Job!]!
    name: string // String!
    slug: string // String!
    twitter: string | null // String
    updatedAt: NexusGenScalars['DateTime'] // DateTime!
    viewCount: number // Int!
    website: string // String!
  }
  CompanySearch: {
    // field return type
    id: string // ID!
    name: string // String!
  }
  CreateBillingPortalSessionResult: {
    // field return type
    url: string // String!
  }
  CreateCheckoutSessionResult: {
    // field return type
    sessionUrl: string // String!
  }
  Job: {
    // field return type
    applyUrl: string // String!
    archivedAt: NexusGenScalars['DateTime'] | null // DateTime
    company: NexusGenRootTypes['Company'] // Company!
    createdAt: NexusGenScalars['DateTime'] // DateTime!
    description: NexusGenScalars['JSONObject'] // JSONObject!
    id: string // ID!
    liked: boolean // Boolean!
    position: string // String!
    remote: boolean // Boolean!
    role: NexusGenEnums['JobRole'] // JobRole!
    status: NexusGenEnums['JobStatus'] // JobStatus!
    tags: NexusGenRootTypes['Tag'][] // [Tag!]!
    type: NexusGenEnums['JobType'] // JobType!
    updatedAt: NexusGenScalars['DateTime'] // DateTime!
    viewCount: number // Int!
  }
  Mutation: {
    // field return type
    addLike: NexusGenRootTypes['Job'] // Job!
    archiveJob: NexusGenRootTypes['Job'] // Job!
    createAlert: NexusGenRootTypes['Alert'] // Alert!
    createBillingPortalSession: NexusGenRootTypes['CreateBillingPortalSessionResult'] // CreateBillingPortalSessionResult!
    createCheckoutSession: NexusGenRootTypes['CreateCheckoutSessionResult'] // CreateCheckoutSessionResult!
    createFeedback: NexusGenRootTypes['SuccessResult'] // SuccessResult!
    createJob: NexusGenRootTypes['Job'] // Job!
    createTag: NexusGenRootTypes['Tag'] // Tag!
    publishJob: NexusGenRootTypes['Job'] // Job!
    removeAlert: NexusGenRootTypes['SuccessResult'] // SuccessResult!
    removeLike: NexusGenRootTypes['Job'] // Job!
    unpublishJob: NexusGenRootTypes['Job'] // Job!
    updateCompany: NexusGenRootTypes['Company'] // Company!
    updateJob: NexusGenRootTypes['Job'] // Job!
    updateUser: NexusGenRootTypes['User'] // User!
    viewCompany: NexusGenRootTypes['Company'] // Company!
    viewJob: NexusGenRootTypes['Job'] // Job!
  }
  Query: {
    // field return type
    checkoutSession: NexusGenRootTypes['CheckoutSessionResult'] // CheckoutSessionResult!
    companies: NexusGenRootTypes['Company'][] // [Company!]!
    company: NexusGenRootTypes['Company'] // Company!
    companyBySlug: NexusGenRootTypes['Company'] // Company!
    job: NexusGenRootTypes['Job'] // Job!
    jobs: NexusGenRootTypes['Job'][] // [Job!]!
    searchCities: NexusGenRootTypes['City'][] // [City!]!
    searchCompanies: NexusGenRootTypes['CompanySearch'][] // [CompanySearch!]!
    searchTags: NexusGenRootTypes['TagSearch'][] // [TagSearch!]!
    user: NexusGenRootTypes['User'] // User!
  }
  SuccessResult: {
    // field return type
    success: boolean // Boolean!
  }
  Tag: {
    // field return type
    id: string // ID!
    name: string // String!
  }
  TagSearch: {
    // field return type
    count: number // Int!
    id: string // ID!
    name: string // String!
  }
  User: {
    // field return type
    alerts: NexusGenRootTypes['Alert'][] // [Alert!]!
    company: NexusGenRootTypes['Company'] | null // Company
    email: string // String!
    id: string // ID!
    jobs: NexusGenRootTypes['Job'][] // [Job!]!
    likes: NexusGenRootTypes['Job'][] // [Job!]!
    name: string | null // String
  }
}

export interface NexusGenFieldTypeNames {
  Alert: {
    // field return type name
    filter: 'JSONObject'
    id: 'ID'
  }
  CheckoutSessionResult: {
    // field return type name
    amount: 'Int'
    id: 'String'
  }
  City: {
    // field return type name
    id: 'ID'
    name: 'String'
  }
  Company: {
    // field return type name
    createdAt: 'DateTime'
    description: 'String'
    email: 'String'
    id: 'ID'
    jobs: 'Job'
    name: 'String'
    slug: 'String'
    twitter: 'String'
    updatedAt: 'DateTime'
    viewCount: 'Int'
    website: 'String'
  }
  CompanySearch: {
    // field return type name
    id: 'ID'
    name: 'String'
  }
  CreateBillingPortalSessionResult: {
    // field return type name
    url: 'String'
  }
  CreateCheckoutSessionResult: {
    // field return type name
    sessionUrl: 'String'
  }
  Job: {
    // field return type name
    applyUrl: 'String'
    archivedAt: 'DateTime'
    company: 'Company'
    createdAt: 'DateTime'
    description: 'JSONObject'
    id: 'ID'
    liked: 'Boolean'
    position: 'String'
    remote: 'Boolean'
    role: 'JobRole'
    status: 'JobStatus'
    tags: 'Tag'
    type: 'JobType'
    updatedAt: 'DateTime'
    viewCount: 'Int'
  }
  Mutation: {
    // field return type name
    addLike: 'Job'
    archiveJob: 'Job'
    createAlert: 'Alert'
    createBillingPortalSession: 'CreateBillingPortalSessionResult'
    createCheckoutSession: 'CreateCheckoutSessionResult'
    createFeedback: 'SuccessResult'
    createJob: 'Job'
    createTag: 'Tag'
    publishJob: 'Job'
    removeAlert: 'SuccessResult'
    removeLike: 'Job'
    unpublishJob: 'Job'
    updateCompany: 'Company'
    updateJob: 'Job'
    updateUser: 'User'
    viewCompany: 'Company'
    viewJob: 'Job'
  }
  Query: {
    // field return type name
    checkoutSession: 'CheckoutSessionResult'
    companies: 'Company'
    company: 'Company'
    companyBySlug: 'Company'
    job: 'Job'
    jobs: 'Job'
    searchCities: 'City'
    searchCompanies: 'CompanySearch'
    searchTags: 'TagSearch'
    user: 'User'
  }
  SuccessResult: {
    // field return type name
    success: 'Boolean'
  }
  Tag: {
    // field return type name
    id: 'ID'
    name: 'String'
  }
  TagSearch: {
    // field return type name
    count: 'Int'
    id: 'ID'
    name: 'String'
  }
  User: {
    // field return type name
    alerts: 'Alert'
    company: 'Company'
    email: 'String'
    id: 'ID'
    jobs: 'Job'
    likes: 'Job'
    name: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    addLike: {
      // args
      id: string // ID!
    }
    archiveJob: {
      // args
      id: string // ID!
    }
    createAlert: {
      // args
      input: NexusGenInputs['CreateAlertInput'] // CreateAlertInput!
    }
    createCheckoutSession: {
      // args
      input: NexusGenInputs['CreateCheckoutSessionInput'] // CreateCheckoutSessionInput!
    }
    createFeedback: {
      // args
      input: NexusGenInputs['CreateFeedbackInput'] // CreateFeedbackInput!
    }
    createJob: {
      // args
      input: NexusGenInputs['CreateJobInput'] // CreateJobInput!
    }
    createTag: {
      // args
      input: NexusGenInputs['CreateTagInput'] // CreateTagInput!
    }
    publishJob: {
      // args
      id: string // ID!
    }
    removeAlert: {
      // args
      id: string // ID!
    }
    removeLike: {
      // args
      id: string // ID!
    }
    unpublishJob: {
      // args
      id: string // ID!
    }
    updateCompany: {
      // args
      input: NexusGenInputs['UpdateCompanyInput'] // UpdateCompanyInput!
    }
    updateJob: {
      // args
      input: NexusGenInputs['UpdateJobInput'] // UpdateJobInput!
    }
    updateUser: {
      // args
      input: NexusGenInputs['UpdateUserInput'] // UpdateUserInput!
    }
    viewCompany: {
      // args
      id: string // ID!
    }
    viewJob: {
      // args
      id: string // ID!
    }
  }
  Query: {
    checkoutSession: {
      // args
      id: string // ID!
    }
    company: {
      // args
      id: string // ID!
    }
    companyBySlug: {
      // args
      slug: string // String!
    }
    job: {
      // args
      id: string // ID!
    }
    jobs: {
      // args
      filter: NexusGenInputs['JobsFilter'] // JobsFilter!
    }
    searchCities: {
      // args
      country: string // String!
      name: string // String!
    }
    searchCompanies: {
      // args
      name: string // String!
      not: string[] // [String!]!
    }
    searchTags: {
      // args
      name: string // String!
      not: string[] // [String!]!
    }
  }
}

export interface NexusGenAbstractTypeMembers {}

export interface NexusGenTypeInterfaces {}

export type NexusGenObjectNames = keyof NexusGenObjects

export type NexusGenInputNames = keyof NexusGenInputs

export type NexusGenEnumNames = keyof NexusGenEnums

export type NexusGenInterfaceNames = never

export type NexusGenScalarNames = keyof NexusGenScalars

export type NexusGenUnionNames = never

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never

export type NexusGenAbstractsUsingStrategyResolveType = never

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context
  inputTypes: NexusGenInputs
  rootTypes: NexusGenRootTypes
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars
  argTypes: NexusGenArgTypes
  fieldTypes: NexusGenFieldTypes
  fieldTypeNames: NexusGenFieldTypeNames
  allTypes: NexusGenAllTypes
  typeInterfaces: NexusGenTypeInterfaces
  objectNames: NexusGenObjectNames
  inputNames: NexusGenInputNames
  enumNames: NexusGenEnumNames
  interfaceNames: NexusGenInterfaceNames
  scalarNames: NexusGenScalarNames
  unionNames: NexusGenUnionNames
  allInputTypes:
    | NexusGenTypes['inputNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['scalarNames']
  allOutputTypes:
    | NexusGenTypes['objectNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['unionNames']
    | NexusGenTypes['interfaceNames']
    | NexusGenTypes['scalarNames']
  allNamedTypes:
    | NexusGenTypes['allInputTypes']
    | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames']
  abstractTypeMembers: NexusGenAbstractTypeMembers
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType
  features: NexusGenFeaturesConfig
}

declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {}
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {}
  interface NexusGenPluginFieldConfig<
    TypeName extends string,
    FieldName extends string
  > {
    /**
     * Authorization for an individual field. Returning "true"
     * or "Promise<true>" means the field can be accessed.
     * Returning "false" or "Promise<false>" will respond
     * with a "Not Authorized" error for the field.
     * Returning or throwing an error will also prevent the
     * resolver from executing.
     */
    authorize?: FieldAuthorizeResolver<TypeName, FieldName>
  }
  interface NexusGenPluginInputFieldConfig<
    TypeName extends string,
    FieldName extends string
  > {}
  interface NexusGenPluginSchemaConfig {}
  interface NexusGenPluginArgConfig {}
}
