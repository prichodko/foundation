### This file was generated by Nexus Schema
### Do not make changes to this file directly

type Alert {
  filter: JSONObject!
  id: ID!
}

type CheckoutSessionResult {
  amount: Int!
  id: String!
}

type City {
  id: ID!
  name: String!
}

type Company {
  createdAt: DateTime!
  description: String!
  email: String!
  id: ID!
  jobs: [Job!]!
  name: String!
  slug: String!
  twitter: String
  updatedAt: DateTime!
  viewCount: Int!
  website: String!
}

type CompanySearch {
  id: ID!
  name: String!
}

input CreateAlertInput {
  filter: JSONObject!
}

type CreateBillingPortalSessionResult {
  url: String!
}

input CreateCheckoutSessionInput {
  name: String!
  price: Int!
}

type CreateCheckoutSessionResult {
  sessionUrl: String!
}

input CreateJobInput {
  applyUrl: String!
  description: String!
  position: String!
  remote: Boolean!
  role: JobRole!
  tags: [ID!]!
  type: JobType!
}

input CreateTagInput {
  name: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Job {
  applyUrl: String!
  archivedAt: DateTime
  company: Company!
  createdAt: DateTime!
  description: JSONObject!
  id: ID!
  liked: Boolean!
  position: String!
  remote: Boolean!
  role: JobRole!
  status: JobStatus!
  tags: [Tag!]!
  type: JobType!
  updatedAt: DateTime!
  viewCount: Int!
}

enum JobRole {
  AccountingAndFinance
  Administration
  BusinessDevelopment
  CustomerService
  Design
  Engineering
  IT
  Legal
  MarketingAndCommunications
  Operations
  Other
  PeopleAndHR
  Product
  QualityAssurance
  Sales
}

enum JobStatus {
  Archived
  Closed
  Draft
  Live
}

enum JobType {
  Contract
  FullTime
  Internship
  PartTime
}

input JobsFilter {
  company: [ID!]
  position: String
  remote: Boolean
  role: JobRole
  salaryMax: Int
  salaryMin: Int
  tags: [ID!]
}

type Mutation {
  addLike(id: ID!): Job!
  archiveJob(id: ID!): Job!
  createAlert(input: CreateAlertInput!): Alert!
  createBillingPortalSession: CreateBillingPortalSessionResult!
  createCheckoutSession(
    input: CreateCheckoutSessionInput!
  ): CreateCheckoutSessionResult!
  createJob(input: CreateJobInput!): Job!
  createTag(input: CreateTagInput!): Tag!
  publishJob(id: ID!): Job!
  removeLike(id: ID!): Job!
  unpublishJob(id: ID!): Job!
  updateCompany(input: UpdateCompanyInput!): Company!
  updateJob(input: UpdateJobInput!): Job!
  updateUser(input: UpdateUserInput!): User!
  viewCompany(id: ID!): Company!
  viewJob(id: ID!): Job!
}

type Query {
  checkoutSession(id: ID!): CheckoutSessionResult!
  companies: [Company!]!
  company(id: ID!): Company!
  companyBySlug(slug: String!): Company!
  job(id: ID!): Job!
  jobs(filter: JobsFilter!): [Job!]!
  searchCities(country: String!, name: String!): [City!]!
  searchCompanies(name: String!, not: [String!]!): [CompanySearch!]!
  searchTags(name: String!, not: [String!]!): [TagSearch!]!
  user: User!
}

type SuccessResult {
  success: Boolean!
}

type Tag {
  id: ID!
  name: String!
}

type TagSearch {
  count: Int!
  id: ID!
  name: String!
}

input UpdateCompanyInput {
  email: String!
  id: ID!
  name: String!
  twitter: String!
  website: String!
}

input UpdateJobInput {
  applyUrl: String!
  description: String!
  id: ID!
  position: String!
  remote: Boolean!
  role: JobRole!
  tags: [ID!]!
}

input UpdateUserInput {
  name: String!
}

type User {
  alerts: [Alert!]!
  company: Company
  email: String!
  id: ID!
  jobs: [Job!]!
  likes: [Job!]!
  name: String
}
